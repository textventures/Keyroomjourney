{"version":3,"file":"pure-cache.js","sources":["../src/constants/events.js","../src/utils/checkInstanceDisposal.js","../src/constants/inMemoryDefaultConfig.js","../src/inMemoryExpirer.js","../src/constants/pureCacheDefaultConfig.js","../src/pureCache.js"],"sourcesContent":["/**\n * Events list\n */\nexport default {\n  EXPIRY: \"expiry\",\n  ADD: \"add\",\n  GET: \"get\",\n  REMOVE: \"remove\",\n  CLEAR: \"clear\"\n};\n","const checkIfInstanceIsDisposed = instanceDisposed => {\n  if (instanceDisposed) {\n    throw new Error(\"Cannot use disposed instance.\");\n  }\n};\n\nexport default checkIfInstanceIsDisposed;\n","/**\n * In memory default config\n * */\nconst inMemoryDefaultConfig = {\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default inMemoryDefaultConfig;\n","import checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/inMemoryDefaultConfig\";\n\n/**\n * Near realtime expiry handler\n *\n * queue Structure:\n *  {\n *    time1: [{key: key1, onExpire: () => {}}, {key: key2, onExpire: () => {}}],\n *    time2: [{key: key3, onExpire: () => {}}]\n *  }\n */\nclass InMemoryExpirer {\n  constructor(config = {}) {\n    // Configuration\n    this.config = Object.assign({}, defaultConfig, config);\n\n    // Expirer queue\n    this.queue = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Store last expired time to navigate from current expired time to last expired time\n    // Set initial value to current time - 1\n    // Don't set to 0 as expiry function will loop from current time to 0\n    this.lastExpiredTime = Date.now() - 1;\n\n    // Run the expiry function at every configured interval time\n    const { expiryCheckInterval } = this.config;\n    this.timer = setInterval(this.expire, expiryCheckInterval);\n  }\n\n  /**\n   * Expiry function\n   * */\n  expire = () => {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const time = Date.now();\n\n    for (let t = time; t >= this.lastExpiredTime; t -= 1) {\n      const toExpire = this.queue[t];\n\n      if (toExpire) {\n        delete this.queue[t];\n        toExpire.forEach(({ key, onExpire }) => onExpire(key));\n      }\n    }\n\n    this.lastExpiredTime = time;\n  };\n\n  /**\n   * Add to expiry queue\n   *\n   * @param {Number} time  When to expire\n   * @param {String} key key to store expiry data against\n   * @param {Function} onExpire Expiry callback, called when Date.now() ~= time\n   * */\n  add(time, key, onExpire) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    if (!this.queue[time]) {\n      this.queue[time] = [];\n    }\n\n    this.queue[time].push({ key, onExpire });\n\n    return true;\n  }\n\n  /**\n   * Remove specific key from expiry queue\n   *\n   * @param {Number} time  Expiry time\n   * @param {String} key key to remove from the expiry queue\n   * */\n  remove(time, key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const queue = this.queue[time];\n\n    if (queue) {\n      // Filter out keys in queue[time] which are matching current remove key\n      const filteredQueue = queue.filter(({ key: k }) => k !== key);\n      if (!filteredQueue.length) {\n        delete this.queue[time];\n      } else {\n        this.queue[time] = filteredQueue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Empty queue & clear expirer timer\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    clearInterval(this.timer);\n    this.timer = null;\n    this.queue = {};\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default InMemoryExpirer;\n","/**\n * Pure cache default config\n * */\nconst pureCacheDefaultConfig = {\n  // Default cache expiry time, 60000ms(60s) by default\n  // Set `false` to disable expiry(This beats the purpose of cache, the data is store until the instance is disposed)\n  // Note: Falsy values like `0` will be treated as `false`\n  defaultCacheExpiryIn: 60000,\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default pureCacheDefaultConfig;\n","import mitt from \"mitt\";\nimport Events from \"./constants/events\";\nimport InMemoryExpirer from \"./inMemoryExpirer\";\nimport checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/pureCacheDefaultConfig\";\n\n/**\n * pure-cache: Cache with confidence ðŸŽ‰ Ultra fast in-memory JavaScript cache with near realtime cache expiry feature âš¡\n *\n * cacheStore Structure:\n *    {\n *      key1: { value: value1, addedAt: 1527012874728, expiryAt: 1527012879729 },\n *      key2: { value: value2, addedAt: 1527012908893, expiryAt: 1527012909880 },\n *      ...\n *    }\n */\nclass PureCache {\n  constructor(config = {}, Expirer = InMemoryExpirer) {\n    // Configuration\n    this.config = Object.assign({}, defaultConfig, config);\n\n    // Event listeners\n    const { on, off, emit } = mitt();\n    [this.on, this.off, this.emit] = [on, off, emit];\n\n    // Cache store\n    this.cacheStore = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Create cache expirer instance, which maintains its own expiry queue\n    const { expiryCheckInterval } = this.config;\n    this.cacheExpirer = new Expirer({ expiryCheckInterval });\n  }\n\n  /**\n   * Put data into the cache\n   *\n   * @param {String} key  Cache key\n   * @param {String|Object|*} value Value to be stored against cache key\n   * @param {Number} expiryIn Expiry time(in ms from now), defaults to `60000ms(60s)`,\n   *                          if set to falsy values(like `0` & `false`), cache will\n   *                          act as simple in-memory data store and data is never expired for the key\n   *\n   * @returns {Object} Newly added Object({ value, addedAt, expiryAt }) with `value` key consists of actual data\n   * */\n  put(key = \"\", value = \"\", expiryIn = this.config.defaultCacheExpiryIn) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    // Remove existing values in the key(if any)\n    if (this.cacheStore[key]) {\n      this.remove(key);\n    }\n\n    const addedAt = Date.now();\n    // Ignore all falsy values(like `0` & `false`)\n    // Basically if there is no expiry, cache will act as simple in-memory data store\n    const expiryAt = expiryIn ? addedAt + expiryIn : null;\n    const target = { value, addedAt, expiryAt };\n    this.cacheStore[key] = target;\n\n    // If expiry time exists, add to expiry queue\n    if (expiryAt) {\n      // Remove value from cache and trigger expiry event\n      const onExpire = () => {\n        this.remove(key);\n        this.emit(Events.EXPIRY, {\n          key,\n          data: this.cacheStore[key]\n        });\n      };\n\n      this.cacheExpirer.add(expiryAt, key, onExpire);\n    }\n    this.emit(Events.ADD, { key, data: target });\n\n    return target;\n  }\n\n  /**\n   * Get data from the cache\n   *\n   * @param {String} key  Cache key\n   *\n   * @returns {Object|null} If `key` found, returns Object({ value, addedAt, expiryAt })\n   *                        with `value` key consists of actual data, else returns `null`\n   * */\n  get(key = \"\") {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      this.emit(Events.GET, { key, data: target });\n      return target;\n    }\n\n    return null;\n  }\n\n  /**\n   * Remove data from the cache\n   *\n   * @param {String} key  Cache key to be removed from the cache\n   *\n   * @returns {Boolean} If `key` found, returns `true`,else returns `false`\n   * */\n  remove(key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      // Remove key & value from cache\n      delete this.cacheStore[key];\n      const { expiryAt } = target;\n      // If timer exists for the key, remove it\n      this.cacheExpirer.remove(expiryAt, key);\n      this.emit(Events.REMOVE, { key, data: target });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Clear entire cache & stop expirer\n   *\n   * @returns {Boolean} Returns `true`\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    Object.keys(this.cacheStore).forEach(key => this.remove(key));\n    this.emit(Events.CLEAR, {});\n    this.cacheExpirer.dispose();\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default PureCache;\n"],"names":["EXPIRY","ADD","GET","REMOVE","CLEAR","checkIfInstanceIsDisposed","instanceDisposed","Error","inMemoryDefaultConfig","expiryCheckInterval","InMemoryExpirer","config","disposed","time","Date","now","t","lastExpiredTime","toExpire","queue","forEach","key","onExpire","Object","assign","defaultConfig","timer","setInterval","expire","push","filteredQueue","filter","k","length","clearInterval","pureCacheDefaultConfig","defaultCacheExpiryIn","PureCache","Expirer","mitt","on","off","emit","cacheStore","cacheExpirer","value","expiryIn","remove","addedAt","expiryAt","target","Events","data","add","keys","dispose"],"mappings":"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"}